Page Router 의 장점
    1. 파일 시스템 기반의 간편한 페이지 라우팅 제공
        ⚫ 디렉토리 구조를 이용한 페이지 라우팅
        ⚫ [id] : 다이나믹 페이지의 경우 []를 통해 다양한 URL 파라미터에 대응
        ⚫ [...id] : 캐치홀 세그먼트를 설정해 중첩된 모든 URL 파라미터에 대응
        ⚫ [[...id]] : 옵셔널 캐치홀 세그먼트를 설정해 인덱스 페이지까지 포함하면서 동시에 중첩된 모든
                        URL 파라미터에 대응


    2. 다양한 방식의 사전 렌더링 제공
        기존 리액트 프로그램이 갖던 느린 FCP 라는 단점을 효과적으로 해결하기 위해
        브라우저로부터 접속 요청을 받았을 때 서버측에서 직접 JS 코드를 실행해서
        완성된 HTML 페이지를 미리 생성해 브라우저에게 응답함으로써 FCP 를 효과적으로 단축하는
        사전 렌더링 방식으로 동작

            1. 서버사이드 렌더링 (SSR)
                ⚫ 요청이 들어올 때마다 사전 렌더링 진행
                    - 항상 최신 데이터를 반영 가능
                    - 페이지 생성 과정에서 백엔드 서버와의 데이터 전송 딜레이에 따라 응답 속도 저하 가능성

            2. 정적 사이트 생성 (SSG)
                ⚫ 빌드 타임에 미리 페이지를 사전 렌더링
                    - 페이지 생성 과정에서 데이터 전송에 오랜 시간이 걸리더라도 빌드 타임에만 발생하기 때문에
                      빌드 이후 접속 요청에는 빠르게 대응 가능
                    - 대신 빌드 타임 이후에는 다시는 해당 페이지를 재생성하지 않아 최신 데이터 반영 불가

            3. 증분 정적 재생성 (ISR)
                ⚫ 일정 시간마다 SSG 페이지 재생성
                    - 최신 데이터 반영하도록 설정 가능
                    - 유저의 특정 행동에 따라 데이터가 업데이트 되는 경우, On-Demand 방식으로 넥스트 서버에게 직접
                      Revalidate 요청을 보내 페이지를 즉각적으로 재생성 가능
                    - 거의 모든 케이스에 쉽게 대응 가능


Page Router 의 단점
    1. 번거로운 페이지별 레이아웃 설정
        ⚫ 레이아웃이 적용되길 원하는 페이지마다 GetLayout 메서드를 새롭게 추가
            - 페이지별 레이아웃이 많아진다면 중복 코드 발생, 불필요하게 복잡

    2. 데이터 페칭이 페이지 컴포넌트에 집중
        ⚫ 서버에게 불러온 모든 데이터는 Page 컴포넌트에게 Props 로 전달되는 구조
            - 해당 페이지 내에 여러 컴포넌트가 존재하게 된다면 데이터 전달 과정이 번거로움

    3. 불필요한 컴포넌트들도 JS Bundle 에 포함
        ⚫ FCP 이후 서버에서 JS 번들을 전달하는 과정에서 불필요한 컴포넌트들도 전달
            - 상호작용 기능이 없어 하이드레이션 될 필요 없는 컴포넌트들 또한 전달
            - 하이드레이션 과정 시간 소요 증가, TTI 시간 소요 증가